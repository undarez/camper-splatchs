// Script pour d√©finir l'email administrateur dans la base de donn√©es
// Ex√©cuter avec: node --experimental-specifier-resolution=node scripts/set-admin-email.js

import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function main() {
  try {
    // R√©cup√©rer l'email administrateur depuis les variables d'environnement
    const adminEmail = process.env.NEXT_PUBLIC_ADMIN_EMAIL || process.env.ADMIN_EMAIL;
    
    if (!adminEmail) {
      console.error('‚ùå Erreur: Variable d\'environnement NEXT_PUBLIC_ADMIN_EMAIL ou ADMIN_EMAIL non d√©finie');
      process.exit(1);
    }
    
    console.log(`üîç Recherche de l'utilisateur avec l'email: ${adminEmail}`);
    
    // V√©rifier si l'utilisateur existe
    const user = await prisma.user.findUnique({
      where: { email: adminEmail },
      select: { id: true, email: true, role: true },
    });
    
    if (!user) {
      console.error(`‚ùå Erreur: Utilisateur avec l'email ${adminEmail} non trouv√© dans la base de donn√©es`);
      process.exit(1);
    }
    
    console.log(`‚úÖ Utilisateur trouv√©: ${JSON.stringify(user)}`);
    
    // Mettre √† jour le r√¥le si n√©cessaire
    if (user.role !== 'ADMIN') {
      console.log(`üîÑ Mise √† jour du r√¥le de l'utilisateur ${user.email} de ${user.role} √† ADMIN`);
      
      const updatedUser = await prisma.user.update({
        where: { email: adminEmail },
        data: { role: 'ADMIN' },
        select: { id: true, email: true, role: true },
      });
      
      console.log(`‚úÖ R√¥le mis √† jour avec succ√®s: ${JSON.stringify(updatedUser)}`);
      
      // Supprimer les sessions existantes pour forcer une nouvelle connexion
      const deletedSessions = await prisma.session.deleteMany({
        where: { userId: user.id },
      });
      
      console.log(`üóëÔ∏è Sessions supprim√©es: ${deletedSessions.count}`);
    } else {
      console.log(`‚úÖ L'utilisateur a d√©j√† le r√¥le ADMIN`);
    }
    
    // V√©rifier tous les utilisateurs avec le r√¥le ADMIN
    const adminUsers = await prisma.user.findMany({
      where: { role: 'ADMIN' },
      select: { id: true, email: true, role: true },
    });
    
    console.log(`üìä Utilisateurs avec le r√¥le ADMIN (${adminUsers.length}):`);
    adminUsers.forEach(admin => {
      console.log(`   - ${admin.email}`);
    });
    
    console.log('‚úÖ Op√©ration termin√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main(); 