generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String      @id @default(cuid()) @db.Text
  name                 String?     @db.Text
  department           String?     @db.Text
  age                  Int?
  camperModel          String?     @db.Text
  email                String?     @unique @db.Text
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  stations             Station[]
  role                 Role        @default(USER)
  reviews              Review[]
  analytics            Analytics[]
  encryptionVersion    Int         @default(1)
  encryptedName        String?     @db.Text
  encryptedEmail       String?     @db.Text
  encryptedDepartment  String?     @db.Text
  encryptedCamperModel String?     @db.Text
}

enum StationStatus {
  active
  en_attente
  inactive
}

model Station {
  id               String        @id @default(cuid())
  name             String
  address          String
  latitude         Float
  longitude        Float
  images           String[]
  status           StationStatus @default(en_attente)
  validatedAt      DateTime?
  validatedBy      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  services         Service?
  author           User          @relation(fields: [authorId], references: [id])
  authorId         String
  reviews          Review[]
  encryptedName    String?       @db.Text
  encryptedAddress String?       @db.Text
}

model Review {
  id               String   @id @default(cuid())
  content          String   @db.Text
  rating           Int
  createdAt        DateTime @default(now())
  station          Station  @relation(fields: [stationId], references: [id])
  stationId        String
  author           User     @relation(fields: [authorId], references: [id])
  authorId         String
  encryptedContent String?  @db.Text
}

model Service {
  id               String            @id @default(cuid())
  highPressure     HighPressureType? @default(NONE) // Type de haute pression
  tirePressure     Boolean           @default(false)
  vacuum           Boolean           @default(false)
  handicapAccess   Boolean           @default(false)
  wasteWater       Boolean           @default(false)
  paymentMethods   PaymentMethod[] // Plusieurs modes de paiement possibles
  electricity      ElectricityType? // Type d'électricité disponible
  maxVehicleLength Float? // Longueur maximale en mètres (optionnel)
  station          Station           @relation(fields: [stationId], references: [id])
  stationId        String            @unique // Pour garantir la relation one-to-one
  createdAt        DateTime          @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum HighPressureType {
  NONE
  PASSERELLE
  ECHAFAUDAGE
  PORTIQUE
}

enum PaymentMethod {
  JETON
  ESPECES
  CARTE_BANCAIRE
}

enum ElectricityType {
  NONE
  AMP_8
  AMP_15
}

enum Role {
  USER
  ADMIN
}

model Analytics {
  id        String    @id @default(cuid())
  type      EventType
  path      String // Pour savoir quelle page a été visitée
  userId    String? // Optionnel, pour tracker les utilisateurs connectés
  user      User?     @relation(fields: [userId], references: [id])
  timestamp DateTime  @default(now())
  ip        String? // Optionnel, pour différencier les visiteurs uniques
}

enum EventType {
  PAGE_VIEW
  STATION_CREATION
  USER_REGISTRATION
}
