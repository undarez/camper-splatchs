generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           Role           @default(USER)
  department     String?
  age            Int?
  camperModel    String?
  usageFrequency String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  sessions       Session[]
  stations       Station[]      @relation("StationAuthor")
  reviews        Review[]       @relation("ReviewAuthor")
  analytics      Analytics[]
  activities     UserActivity[]
  visits         Visit[]
  Station        Station[]
}

enum StationStatus {
  active
  en_attente
  inactive
}

enum StationType {
  STATION_LAVAGE
  PARKING
}

enum CommerceType {
  NOURRITURE
  BANQUE
  CENTRE_VILLE
  STATION_SERVICE
  LAVERIE
  GARAGE
}

model Station {
  id               String          @id @default(cuid())
  name             String
  address          String
  city             String?
  postalCode       String?
  latitude         Float
  longitude        Float
  images           String[]        @default([])
  status           StationStatus   @default(en_attente)
  type             StationType     @default(STATION_LAVAGE)
  validatedAt      DateTime?
  validatedBy      String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  services         Service?
  parkingDetails   ParkingDetails?
  author           User            @relation("StationAuthor", fields: [authorId], references: [id])
  authorId         String
  reviews          Review[]        @relation("StationReviews")
  encryptedName    String?         @db.Text
  encryptedAddress String?         @db.Text
  visits           Visit[]
  hasParking       Boolean         @default(false)
  userId           String?
  user             User?           @relation(fields: [userId], references: [id])
}

model ParkingDetails {
  id               String          @id @default(cuid())
  isPayant         Boolean         @default(false)
  tarif            Float?
  hasElectricity   ElectricityType @default(NONE)
  commercesProches CommerceType[]
  handicapAccess   Boolean         @default(false)
  station          Station         @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId        String          @unique
  createdAt        DateTime        @default(now())
}

model Review {
  id               String   @id @default(cuid())
  content          String   @db.Text
  rating           Int
  createdAt        DateTime @default(now())
  station          Station  @relation("StationReviews", fields: [stationId], references: [id])
  stationId        String
  author           User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId         String
  encryptedContent String?  @db.Text
}

model Service {
  id                 String           @id @default(cuid())
  highPressure       HighPressureType @default(NONE)
  tirePressure       Boolean          @default(false)
  vacuum             Boolean          @default(false)
  handicapAccess     Boolean          @default(false)
  wasteWater         Boolean          @default(false)
  waterPoint         Boolean          @default(false)
  wasteWaterDisposal Boolean          @default(false)
  blackWaterDisposal Boolean          @default(false)
  paymentMethods     PaymentMethod[]
  electricity        ElectricityType  @default(NONE)
  maxVehicleLength   Float?
  station            Station          @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId          String           @unique
  createdAt          DateTime         @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum HighPressureType {
  NONE
  PASSERELLE
  ECHAFAUDAGE
  PORTIQUE
}

enum PaymentMethod {
  JETON
  ESPECES
  CARTE_BANCAIRE
}

enum ElectricityType {
  NONE
  AMP_8
  AMP_15
}

enum Role {
  USER
  ADMIN
}

model Analytics {
  id        String    @id @default(cuid())
  type      EventType
  path      String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  timestamp DateTime  @default(now())
  ip        String?
}

enum EventType {
  PAGE_VIEW
  STATION_CREATION
  USER_REGISTRATION
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Visit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  stationId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
}
